from aiogram import Bot, Dispatcher, executor, types
from loguru import logger
from aiogram.filters.command import Command
import re

from config import TOKEN
import sqlite3
import os

from youtube import dowload_video

bot = Bot(token=TOKEN)
dp = Dispatcher(bot) # https://habr.com/ru/articles/732136/, –≥–æ–≤–æ—Ä—è—Ç –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–æ—É—Ç–µ—Ä

con = sqlite3.connect(r"Person_files.db")
cursor = con.cursor()
sql = 'INSERT INTO Person_files(person_id, name_files) VALUES(?, ?)'

# pattern = r"^(https?:\/\/)?([\w-]{1,32}\.[\w-]{1,32})[^\s@]*$"
# pattern = r"^(https?:\/\/)?(vm.tiktok.com\/)[^\s@]*$"
pattern = r"^(https?:\/\/)?(www.youtube.com\/)[^\s@]*$"


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {message.from_user.first_name}. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?)')

# @dp.message_handler(commands=['help'])
# async def bot_help(message: types.Message):
#     text = ("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ",
#             "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥",
#             "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É",
#             "/audio - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–º –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
#             "/video - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–º –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
#
#     await message.answer("\n".join(text))
# https://vm.tiktok.com/ZMYhdq2yG/ https://www.youtube.com/watch?v=4II3l3QXXo0
async def set_default_commands(dp):
    await dp.bot.set_my_commands(
        [
            types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            types.BotCommand("help", "–í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É"),
            types.BotCommand("audio", "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ —é—Ç—É–±–∞ –∏ –ø–µ—Ä–µ–µ—Å—Ç–∏ –≤ –∞—É–¥–∏–æ")
        ]
    )


@dp.message_handler(commands=["answer"])
async def cmd_answer(message: types.Message):
    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")

@logger.catch
@dp.message_handler(Command('audio')) # @dp.message_handler(content_types=['text'])
async def get_text_messages(msg: types.Message):
    logger.debug(msg.text)
    cursor.execute("SELECT * FROM Person_files")
    #logger.debug(cursor.fetchall())
    if re.match(pattern, msg.text):
        con.executemany(sql, [(msg.from_user.id, msg.text)])
        await msg.answer('This is TikTok link!')
        title = dowload_video(msg.text, type="video")
        audio = open(f'audio/{title}', 'rb')
        await msg.answer(text="–í—Å–µ —Å–∫–∞—á–∞–ª–æ—Å—å –¥–µ—Ä–∂–∏ –∞—É–¥–∏–æ")
        try:
            await bot.send_video(msg.chat.id, audio)
            await bot.send_message(msg.chat.id, text='üëç')
        except:
            await msg.answer(text="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
        os.remove(f'audio/{title}')
        # await state.finish()


# @dp.message_handler()
# async def echo_message(msg: types.Message):
#     await bot.send_message(msg.from_user.id, msg.text)

if __name__ == '__main__':
    executor.start_polling(dp)
